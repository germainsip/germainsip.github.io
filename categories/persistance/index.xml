<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistance on Mes ressources</title>
    <link>/categories/persistance/</link>
    <description>Recent content in Persistance on Mes ressources</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Mon, 04 May 2020 12:24:26 +0000</lastBuildDate>
    
	<atom:link href="/categories/persistance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Velvet1</title>
      <link>/post/cours/java/velvet1/</link>
      <pubDate>Mon, 04 May 2020 12:24:26 +0000</pubDate>
      
      <guid>/post/cours/java/velvet1/</guid>
      <description>Construction du squelette de l&amp;rsquo;appli Commencez par cr√©er un projet JavaFX avec Gradle.
  Ajoutez les plugins au build.gradle
plugins { id &amp;#39;java&amp;#39; id &amp;#39;application&amp;#39; id &amp;#39;org.openjfx.javafxplugin&amp;#39; version &amp;#39;0.0.8&amp;#39; } on d√©finie les modules de javaFX la classe main
javafx { version = &amp;#34;14&amp;#34; modules = [&amp;#34;javafx.controls&amp;#34;,&amp;#34;javafx.base&amp;#34;,&amp;#34;javafx.graphics&amp;#34;,&amp;#34;javafx.fxml&amp;#34;] } mainClassName = &amp;#39;org.germain.App&amp;#39; Cr√©ez les packages ainsi que App.java, velvet.fxml et VelvetController.java comme dans la vid√©o.
Enfin, apportez les modification √† build.</description>
    </item>
    
    <item>
      <title>Covid_widget</title>
      <link>/post/cours/java/covid_widget/</link>
      <pubDate>Thu, 16 Apr 2020 08:10:03 +0000</pubDate>
      
      <guid>/post/cours/java/covid_widget/</guid>
      <description>Un Widget pour conna√Ætre les chiffres du covid J&amp;rsquo;ai d√©couvert gr√¢ce √† Muhammed Afsal Villan une api et une m√©thode pour faire un widget qui nous donnera les stats du COVID-19 en direct.
D&amp;rsquo;abord l&amp;rsquo;API A l&amp;rsquo;adresse suivant https://coronavirus-19-api.herokuapp.com vous avez une api faite par Javier Aviles qui nous donne les chiffres du covid-19. Son utilisation est simple vous allez voire
Entrez https://coronavirus-19-api.herokuapp.com/countries/france dans insomnia et vous allez recevoir le json suivant:</description>
    </item>
    
    <item>
      <title>JavaFX et sauvegarde Partie 2</title>
      <link>/post/cours/java/javafx2/</link>
      <pubDate>Thu, 19 Mar 2020 10:32:50 +0000</pubDate>
      
      <guid>/post/cours/java/javafx2/</guid>
      <description>üé• La vid√©o arrive! Juste le temps de la faire üé•
 maj: 21/03/2020
 Pr√©requis: avoir suivi la premi√®re partie JavaFX et sauvegarde Partie 1
Comme promis, nous allons d&amp;rsquo;abord utiliser JSON.simple. Le but ici est uniquement de vous montrer comment sauvegarder quelques information sur notre application, dans la prochaine partie nous les importerons.
Importons Json.simple Il faut tout d&amp;rsquo;abord importer la biblioth√®que. Dans le pom fait un ajout de d√©pendance, soit avec clique droit sur &amp;lt;dependencies&amp;gt; et Generate&amp;hellip; ou avec le raccourcit clavier puis Depedency.</description>
    </item>
    
    <item>
      <title>JavaFX et sauvegarde Partie 1</title>
      <link>/post/cours/java/javafx/</link>
      <pubDate>Mon, 16 Mar 2020 15:05:18 +0000</pubDate>
      
      <guid>/post/cours/java/javafx/</guid>
      <description>Sauvegardons des donn√©es en Json Plusieurs biblioth√®ques existent pour exploiter le Json avec Java. Je vous propose d&amp;rsquo;en essayer 2. Nous utiliserons Json.simple et Jackson. La premi√®re est tr√®s simple d&amp;rsquo;utilisation comme son nom l&amp;rsquo;indique et la deuxi√®me nous donnera plus d&amp;rsquo;outils pour la gestion de nos objets. Je prend le partie de vous montrer l&amp;rsquo;application de ces outils avec JavaFX car le bind sera particulier dans ce cas.
  Commen√ßons par l&amp;rsquo;interface graphique Cr√©ez un projet dans l&amp;rsquo;IDE de votre choix.</description>
    </item>
    
  </channel>
</rss>